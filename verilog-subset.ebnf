// A.1.2 SystemVerilog source text
source_text ::= description*;
description ::= module_declaration;
module_declaration ::= module_ansi_header module_item* 'endmodule';
module_ansi_header ::= attribute_instance* module_keyword module_identifier list_of_port_declarations? ';' ;
module_keyword ::= 'module' | 'macromodule';

// A.1.3 Module parameters and ports
list_of_port_declarations ::= '(' (attribute_instance* ansi_port_declaration ( ',' attribute_instance* ansi_port_declaration )*)? ')';
ansi_port_declaration ::= net_port_header? port_identifier unpacked_dimension*;
net_port_header ::= port_direction? net_port_type;
port_direction ::= 'input' | 'output' | 'inout' | 'ref';
port_declaration ::= attribute_instance* inout_declaration | attribute_instance* input_declaration | attribute_instance* output_declaration;

// A.1.4
module_item ::= port_declaration ';' | non_port_module_item;

// A.2.1.2
inout_declaration ::= 'inout' net_port_type list_of_port_identifiers;
input_declaration ::= 'input' net_port_type list_of_port_identifiers;
output_declaration ::= 'output' net_port_type list_of_port_identifiers;

// A.2.2.1 Net and variable types
net_port_type ::= net_type? data_type_or_implicit;
net_type ::= 'supply0' | 'supply1' | 'tri' | 'triand' | 'trior' | 'trireg' | 'tri0' | 'tri1' | 'uwire' | 'wire' | 'wand' | 'wor';
data_type_or_implicit ::= data_type | implicit_data_type;
data_type ::= integer_vector_type signing? packed_dimension*;
implicit_data_type ::= signing? packed_dimension*;
signing ::= 'signed' | 'unsigned';
integer_vector_type ::= 'bit' | 'logic' | 'reg';

// A.2.3 Declaration lists

list_of_port_identifiers ::= port_identifier unpacked_dimension* (',' port_identifier unpacked_dimension*)*;

// A.2.5 Declaration ranges
packed_dimension ::= '[' constant_range ']' | unsized_dimension;
unsized_dimension ::= '[' ']';
unpacked_dimension ::= '[' constant_range ']';
constant_range ::= constant_expression ':' constant_expression;
constant_expression ::= constant_primary;
constant_primary ::= primary_literal;
primary_literal ::= number;

// A.9.1 Attributes
attribute_instance ::= '(' '*' attr_spec (',' attr_spec)* '*' ')';
attr_spec ::= attr_name;
attr_name ::= identifier;

// A.9.3 Identifiers
identifier ::= 'identifier';
module_identifier ::= identifier;
port_identifier ::= identifier;

// A.8.7 Numbers
number ::= 'number';